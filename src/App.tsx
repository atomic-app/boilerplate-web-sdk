import React, {useState} from "react";
import {SingleCard} from "./components/singleCard";
import {Launcher} from "./components/launcher";
import {VerticalStream} from "./components/verticalStream";
import {Button} from "./components/button";
import {configureContainer} from "./config/containerConfig";
import AtomicSDK, {AuthToken} from "@atomic.io/action-cards-web-sdk";
import "./App.css";

declare global {
  interface Window {
    AtomicConfig: {
      apiHost: string;
      firstStreamContainerId: string;
      secondStreamContainerId: string;
      thirdStreamContainerId: string;
      apiKey: string;
      environmentId: string;
      jwt: string;
    };
  }
}
const { apiHost, firstStreamContainerId, secondStreamContainerId, thirdStreamContainerId, apiKey, environmentId, jwt } =
  window.AtomicConfig;

AtomicSDK.login(
  apiHost,
  apiKey,
  environmentId,
  async (): Promise<AuthToken> => {
    return Promise.resolve(jwt);
  }
);
AtomicSDK.enableDebugMode(3);

const App = () => {
  const [isVisible, setIsVisible] = useState({
    id: 'single',
  })

  const selectView = (e) => {
    setIsVisible({
      id: e.target.id,
    })
  }

  return (
    <>
      <div className="header">
        <h1>WebSDK React Boilerplate App</h1>
      </div>
        <div className="content">
          {/*The config object for each container is generated by configureContainer when passed the stream container id you wish to display*/}
          <VerticalStream config={configureContainer(firstStreamContainerId)} visible={isVisible.id === 'stream'}/>
          <SingleCard config={configureContainer(secondStreamContainerId)} visible={isVisible.id === 'single'}/>
          <Launcher config={configureContainer(thirdStreamContainerId)} visible={isVisible.id === 'launcher'}/>
        </div>
      <div className="button_container">
        <Button id={'single'} clicked={(e) => {
          selectView(e)
        }}/>
        <Button id={'stream'} clicked={(e) => {
          selectView(e)
        }}/>
        <Button id={'launcher'} clicked={(e) => {
          selectView(e)
        }}/>
      </div>
    </>
  );
};

export default App;
